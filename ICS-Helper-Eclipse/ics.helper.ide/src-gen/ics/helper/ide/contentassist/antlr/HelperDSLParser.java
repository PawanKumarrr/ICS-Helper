/*
 * generated by Xtext 2.34.0
 */
package ics.helper.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import ics.helper.ide.contentassist.antlr.internal.InternalHelperDSLParser;
import ics.helper.services.HelperDSLGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class HelperDSLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(HelperDSLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, HelperDSLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getCommandAccess().getAlternatives(), "rule__Command__Alternatives");
			builder.put(grammarAccess.getModifyCommandAccess().getAlternatives_1(), "rule__ModifyCommand__Alternatives_1");
			builder.put(grammarAccess.getModifyCommandAccess().getAlternatives_3(), "rule__ModifyCommand__Alternatives_3");
			builder.put(grammarAccess.getRecurRuleAccess().getAlternatives(), "rule__RecurRule__Alternatives");
			builder.put(grammarAccess.getWEEKDAYAccess().getAlternatives(), "rule__WEEKDAY__Alternatives");
			builder.put(grammarAccess.getCreateCommandAccess().getGroup(), "rule__CreateCommand__Group__0");
			builder.put(grammarAccess.getEventAccess().getGroup(), "rule__Event__Group__0");
			builder.put(grammarAccess.getEventAccess().getGroup_6(), "rule__Event__Group_6__0");
			builder.put(grammarAccess.getEventAccess().getGroup_7(), "rule__Event__Group_7__0");
			builder.put(grammarAccess.getEventAccess().getGroup_8(), "rule__Event__Group_8__0");
			builder.put(grammarAccess.getEventAccess().getGroup_9(), "rule__Event__Group_9__0");
			builder.put(grammarAccess.getEventAccess().getGroup_10(), "rule__Event__Group_10__0");
			builder.put(grammarAccess.getEventAccess().getGroup_11(), "rule__Event__Group_11__0");
			builder.put(grammarAccess.getEventAccess().getGroup_12(), "rule__Event__Group_12__0");
			builder.put(grammarAccess.getReminderAccess().getGroup(), "rule__Reminder__Group__0");
			builder.put(grammarAccess.getReminderAccess().getGroup_2(), "rule__Reminder__Group_2__0");
			builder.put(grammarAccess.getPersonAccess().getGroup(), "rule__Person__Group__0");
			builder.put(grammarAccess.getDaysOfWeekAccess().getGroup(), "rule__DaysOfWeek__Group__0");
			builder.put(grammarAccess.getDaysOfWeekAccess().getGroup_1(), "rule__DaysOfWeek__Group_1__0");
			builder.put(grammarAccess.getSplitCommandAccess().getGroup(), "rule__SplitCommand__Group__0");
			builder.put(grammarAccess.getMergeCommandAccess().getGroup(), "rule__MergeCommand__Group__0");
			builder.put(grammarAccess.getModifyCommandAccess().getGroup(), "rule__ModifyCommand__Group__0");
			builder.put(grammarAccess.getModifyCommandAccess().getGroup_1_0(), "rule__ModifyCommand__Group_1_0__0");
			builder.put(grammarAccess.getModifyCommandAccess().getGroup_1_1(), "rule__ModifyCommand__Group_1_1__0");
			builder.put(grammarAccess.getModifyCommandAccess().getGroup_3_0(), "rule__ModifyCommand__Group_3_0__0");
			builder.put(grammarAccess.getModifyCommandAccess().getGroup_3_1(), "rule__ModifyCommand__Group_3_1__0");
			builder.put(grammarAccess.getModifyCommandAccess().getGroup_3_2(), "rule__ModifyCommand__Group_3_2__0");
			builder.put(grammarAccess.getModelAccess().getCommandsAssignment(), "rule__Model__CommandsAssignment");
			builder.put(grammarAccess.getCreateCommandAccess().getNameAssignment_2(), "rule__CreateCommand__NameAssignment_2");
			builder.put(grammarAccess.getCreateCommandAccess().getEventsAssignment_4(), "rule__CreateCommand__EventsAssignment_4");
			builder.put(grammarAccess.getEventAccess().getNameAssignment_1(), "rule__Event__NameAssignment_1");
			builder.put(grammarAccess.getEventAccess().getStartTimeAssignment_3(), "rule__Event__StartTimeAssignment_3");
			builder.put(grammarAccess.getEventAccess().getEndTimeAssignment_5(), "rule__Event__EndTimeAssignment_5");
			builder.put(grammarAccess.getEventAccess().getLocationAssignment_6_1(), "rule__Event__LocationAssignment_6_1");
			builder.put(grammarAccess.getEventAccess().getDescriptionAssignment_7_1(), "rule__Event__DescriptionAssignment_7_1");
			builder.put(grammarAccess.getEventAccess().getRecurAssignment_8_1(), "rule__Event__RecurAssignment_8_1");
			builder.put(grammarAccess.getEventAccess().getDaysOfWeekAssignment_8_2(), "rule__Event__DaysOfWeekAssignment_8_2");
			builder.put(grammarAccess.getEventAccess().getLinkAssignment_9_1(), "rule__Event__LinkAssignment_9_1");
			builder.put(grammarAccess.getEventAccess().getOrganizerAssignment_10_1(), "rule__Event__OrganizerAssignment_10_1");
			builder.put(grammarAccess.getEventAccess().getInviteesAssignment_11_2(), "rule__Event__InviteesAssignment_11_2");
			builder.put(grammarAccess.getEventAccess().getReminderAssignment_12_1(), "rule__Event__ReminderAssignment_12_1");
			builder.put(grammarAccess.getReminderAccess().getTimeAssignment_1(), "rule__Reminder__TimeAssignment_1");
			builder.put(grammarAccess.getReminderAccess().getTitleAssignment_2_1(), "rule__Reminder__TitleAssignment_2_1");
			builder.put(grammarAccess.getPersonAccess().getNameAssignment_1(), "rule__Person__NameAssignment_1");
			builder.put(grammarAccess.getPersonAccess().getEmailAssignment_3(), "rule__Person__EmailAssignment_3");
			builder.put(grammarAccess.getDaysOfWeekAccess().getDaysAssignment_0(), "rule__DaysOfWeek__DaysAssignment_0");
			builder.put(grammarAccess.getDaysOfWeekAccess().getDaysAssignment_1_1(), "rule__DaysOfWeek__DaysAssignment_1_1");
			builder.put(grammarAccess.getScheduleAccess().getNameAssignment(), "rule__Schedule__NameAssignment");
			builder.put(grammarAccess.getSplitCommandAccess().getScheduleAssignment_1(), "rule__SplitCommand__ScheduleAssignment_1");
			builder.put(grammarAccess.getSplitCommandAccess().getCriteriaAssignment_3(), "rule__SplitCommand__CriteriaAssignment_3");
			builder.put(grammarAccess.getMergeCommandAccess().getSchedulesAssignment_1(), "rule__MergeCommand__SchedulesAssignment_1");
			builder.put(grammarAccess.getMergeCommandAccess().getTargetAssignment_3(), "rule__MergeCommand__TargetAssignment_3");
			builder.put(grammarAccess.getModifyCommandAccess().getScheduleAssignment_1_0_1(), "rule__ModifyCommand__ScheduleAssignment_1_0_1");
			builder.put(grammarAccess.getModifyCommandAccess().getEventAssignment_1_1_1(), "rule__ModifyCommand__EventAssignment_1_1_1");
			builder.put(grammarAccess.getModifyCommandAccess().getTimeAssignment_3_0_0(), "rule__ModifyCommand__TimeAssignment_3_0_0");
			builder.put(grammarAccess.getModifyCommandAccess().getValueAssignment_3_0_1(), "rule__ModifyCommand__ValueAssignment_3_0_1");
			builder.put(grammarAccess.getModifyCommandAccess().getValueAssignment_3_1_1(), "rule__ModifyCommand__ValueAssignment_3_1_1");
			builder.put(grammarAccess.getModifyCommandAccess().getValueAssignment_3_2_1(), "rule__ModifyCommand__ValueAssignment_3_2_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private HelperDSLGrammarAccess grammarAccess;

	@Override
	protected InternalHelperDSLParser createParser() {
		InternalHelperDSLParser result = new InternalHelperDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public HelperDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(HelperDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}

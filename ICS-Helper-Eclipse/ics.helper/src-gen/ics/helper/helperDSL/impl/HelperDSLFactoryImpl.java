/**
 * generated by Xtext 2.34.0
 */
package ics.helper.helperDSL.impl;

import ics.helper.helperDSL.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class HelperDSLFactoryImpl extends EFactoryImpl implements HelperDSLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static HelperDSLFactory init()
  {
    try
    {
      HelperDSLFactory theHelperDSLFactory = (HelperDSLFactory)EPackage.Registry.INSTANCE.getEFactory(HelperDSLPackage.eNS_URI);
      if (theHelperDSLFactory != null)
      {
        return theHelperDSLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new HelperDSLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public HelperDSLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case HelperDSLPackage.MODEL: return createModel();
      case HelperDSLPackage.COMMAND: return createCommand();
      case HelperDSLPackage.CREATE_COMMAND: return createCreateCommand();
      case HelperDSLPackage.EVENT: return createEvent();
      case HelperDSLPackage.REMINDER: return createReminder();
      case HelperDSLPackage.PERSON: return createPerson();
      case HelperDSLPackage.DAYS_OF_WEEK: return createDaysOfWeek();
      case HelperDSLPackage.SCHEDULE: return createSchedule();
      case HelperDSLPackage.SPLIT_COMMAND: return createSplitCommand();
      case HelperDSLPackage.MERGE_COMMAND: return createMergeCommand();
      case HelperDSLPackage.MODIFY_COMMAND: return createModifyCommand();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case HelperDSLPackage.RECUR_RULE:
        return createRecurRuleFromString(eDataType, initialValue);
      case HelperDSLPackage.WEEKDAY:
        return createWEEKDAYFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case HelperDSLPackage.RECUR_RULE:
        return convertRecurRuleToString(eDataType, instanceValue);
      case HelperDSLPackage.WEEKDAY:
        return convertWEEKDAYToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Command createCommand()
  {
    CommandImpl command = new CommandImpl();
    return command;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CreateCommand createCreateCommand()
  {
    CreateCommandImpl createCommand = new CreateCommandImpl();
    return createCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Event createEvent()
  {
    EventImpl event = new EventImpl();
    return event;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Reminder createReminder()
  {
    ReminderImpl reminder = new ReminderImpl();
    return reminder;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Person createPerson()
  {
    PersonImpl person = new PersonImpl();
    return person;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DaysOfWeek createDaysOfWeek()
  {
    DaysOfWeekImpl daysOfWeek = new DaysOfWeekImpl();
    return daysOfWeek;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Schedule createSchedule()
  {
    ScheduleImpl schedule = new ScheduleImpl();
    return schedule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SplitCommand createSplitCommand()
  {
    SplitCommandImpl splitCommand = new SplitCommandImpl();
    return splitCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MergeCommand createMergeCommand()
  {
    MergeCommandImpl mergeCommand = new MergeCommandImpl();
    return mergeCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ModifyCommand createModifyCommand()
  {
    ModifyCommandImpl modifyCommand = new ModifyCommandImpl();
    return modifyCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RecurRule createRecurRuleFromString(EDataType eDataType, String initialValue)
  {
    RecurRule result = RecurRule.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertRecurRuleToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WEEKDAY createWEEKDAYFromString(EDataType eDataType, String initialValue)
  {
    WEEKDAY result = WEEKDAY.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertWEEKDAYToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HelperDSLPackage getHelperDSLPackage()
  {
    return (HelperDSLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static HelperDSLPackage getPackage()
  {
    return HelperDSLPackage.eINSTANCE;
  }

} //HelperDSLFactoryImpl
